gobatis
Generate go database sql CRUD code, Spirit from MyBatis
Tags: gobatis, mybatis, go, generate, sql, query
18:57 18 Jun 2016

Arstd
Gopher and REPL funs
(Retrive-Evaluate-Plan-Loop, but no Actions ^_^)
https://github.com/arstd/gobatis
@Arstd
shangxuejin@gmail.com

* 主要内容

- gobatis 是什么
- 为什么要用
- 怎么使用
- 更多约定
- 注意事项
- 如何实现的
- 存在的问题
- 下一版重写
- Q&A 建议和意见


* gobatis 是什么

`gobatis` 是一个通过 SQL 语句生成 Go 语言数据库操作代码的小工具，思想来源于 MyBatis

- 代码生成工具，辅助编码，编译运行时不依赖
- 只是个工具，完全非侵入，可用可不用，也可以部分方法使用
- 可以独自使用，对其他人透明
- 没有专门的配置文件，代码就是配置
- 所有类型在编码时都必须明确
- 生成的代码简单可读，可以直接加 log 调试


* 为什么要用

- 快速编码，避免思考相同的逻辑，减少编写重复代码
    => 省时间，省脑子，省手指
- 只关心必须关心的代码，便于查看和调试
- 标准化，模式固定
- 日志详细，便于排查错误


* 怎么使用

定义好数据库操作的接口和方法，并在方法上写上 SQL 语句，然后在文件中通过 go:generate 调用 gobatis，如

    //go:generate gobatis

    type DemoPersister interface {

    	// select id, name, third_field, status, content
    	// from demos
    	// where name=${d.Name}
    	//   [?{d.ThirdField != false} and third_field=${d.ThirdField} ]
    	//   [?{d.Content != nil} and content=${d.Content} ]
    	//   [?{len(statuses) != 0} and status in (${statuses}) ]
        // order by id
        // offset ${offset} limit ${limit}
    	List(tx *sql.Tx, d *domain.Demo, statuses []enums.Status, offset, limit int) ([]*domain.Demo, error)
    }

# .code ../examples/persist/demo.go

编译之前执行 `go generate ./...`，即可生成代码


* 约定规则

- 变量
    ${xxx}
- 条件判断
    [?{ Go表达式 } SQL表达式 ]
    注意：[ ? { 之间不能有空格, ] 前必须有一个空格
- in 表达式单独放在 [] 中，不能有其他参数


* 注意事项

- gobatis 生成的代码最好都提交到仓库中，这样即便其他人没有这个工具，也能运行
- SQL 所有关键字都小写，方便解析，不可混用！！！
- 语句稍加格式化，减少出错的机率，建议 select/from/join/where/and/or/order-by/offset-limit 等单独成行

* 如何实现的

parser --> prepare --> render --> goimports

1. 通过解析接口文件，通过 go/parser 库解析，得到接口中方法、参数类型和注释
2. 分析 SQL，得到 条件、变量，以及变量对应的参数类型等等数据
3. 通过 go 标准库 text/template，渲染生成代码
4. 调用 goimports 工具，整理代码，最后输出到文件


* 存在的问题

- 目前只支持 Postgres，而且不完善
- in 表达式问题
- go/parser 库解析类型过于复杂
- 类型支持不完整，如 time
- 模板太难写了，数据格式也很难定义清晰


* 下一版重写

- 尝试支持 MySQL，理论上讲，可以支持任何 database/sql 兼容的数据库
- 特殊标记处理 in 表达式
- 换用 go/types 取参数和类型
- 尝试用 ${ xxx | json } 这种格式处理变量
- 使用模板高级特性，如调用方法，降低模板和数据结构的复杂度


* 扩展

通过简单定义接口，生成代码的这种思路可以使用到很多地方，比如 RPC


* Q&A

Q & A
建议和意见
